name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 仅当推送以 v 开头的标签时触发（例如 v1.0.0）
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag_name:
        description: '发布版本标签（例如：v2.2.5）'
        required: true
        default: 'v2.2.5'
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # 设置较短的超时时间
    strategy:
      fail-fast: false  # 不要因为一个平台失败就停止其他平台
      matrix:
        os: [macos-latest, windows-latest]  # 并行构建 macOS 和 Windows
        include:
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: win32

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，避免浅克隆问题

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: |
          yarn install
        shell: bash

      - name: Build TypeScript
        run: |
          yarn build
        shell: bash

      - name: Build Native Module
        run: |
          yarn rebuild
        shell: bash
        env:
          PYTHON: python3
          npm_config_python: python3

      - name: Package Binary
        run: |
          # 创建打包目录
          mkdir -p lib/binding/${{ matrix.platform }}-x64
          
          # 复制二进制文件
          if [ -f "build/Release/addon.node" ]; then
            cp "build/Release/addon.node" "lib/binding/${{ matrix.platform }}-x64/"
          fi
          
          # 创建压缩包
          cd lib
          tar -czf "../${{ matrix.platform }}-x64.tar.gz" binding/
          cd ..
          
          echo "打包完成: ${{ matrix.platform }}-x64.tar.gz"
        shell: bash

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: "*.tar.gz"

  release:
    needs: build  # 依赖 build 任务
    runs-on: ubuntu-latest
    timeout-minutes: 10  # 设置超时时间
    if: ${{ !cancelled() && (needs.build.result == 'success' || needs.build.result == 'failure') }}  # 即使部分构建失败也继续
    permissions:
      contents: write  # 允许创建 Release

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets
        continue-on-error: true

      - name: List Available Artifacts
        run: |
          echo "Available artifacts:"
          find ./release-assets -type f -name "*.tar.gz" || echo "No artifacts found"
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name || github.ref_name }}  # 手动触发时使用输入的标签，自动触发时使用推送的标签
          name: Release ${{ inputs.tag_name || github.ref_name }}
          files: release-assets/**/*.tar.gz
          draft: false
          fail_on_unmatched_files: false  # 不要因为找不到文件而失败
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动使用内置 Token