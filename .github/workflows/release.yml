name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 仅当推送以 v 开头的标签时触发（例如 v1.0.0）
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag_name:
        description: '发布版本标签（例如：v2.2.5）'
        required: true
        default: 'v2.2.5'
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  # 增加超时时间以支持Windows构建
    strategy:
      fail-fast: false  # 不要因为一个平台失败就停止其他平台
      matrix:
        os: [macos-latest, windows-latest]  # 并行构建 macOS 和 Windows
        include:
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: win32

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，避免浅克隆问题

      - name: Configure Git (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # 使用 Python 3.10，兼容 node-gyp

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # 降级到 Node 18，更稳定
          cache: 'yarn'
          architecture: 'x64'  # 明确指定 x64 架构

      - name: Setup Visual Studio Build Tools (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup Visual Studio Developer Command Prompt (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Setup Windows Build Environment
        if: matrix.os == 'windows-latest'
        run: |
          echo "Setting up Windows build environment..."
          
          # 设置环境变量
          echo "PYTHON=python" >> $GITHUB_ENV
          echo "npm_config_python=python" >> $GITHUB_ENV
          echo "npm_config_msvs_version=2022" >> $GITHUB_ENV
          echo "npm_config_target_arch=x64" >> $GITHUB_ENV
          echo "npm_config_target_platform=win32" >> $GITHUB_ENV
          echo "npm_config_arch=x64" >> $GITHUB_ENV
          echo "npm_config_target=18.19.0" >> $GITHUB_ENV
          echo "npm_config_runtime=node" >> $GITHUB_ENV
          echo "npm_config_cache=C:/npm-cache" >> $GITHUB_ENV
          echo "npm_config_build_from_source=true" >> $GITHUB_ENV
          
          # 检查已安装的工具链
          echo "Checking build tools..."
          python --version
          node --version
          npm --version
          yarn --version
          
          # 检查Visual Studio安装
          echo "Visual Studio installations:"
          where cl 2>/dev/null || echo "cl.exe not found in PATH"
          
          echo "Windows build environment setup complete"
        shell: bash

      - name: Setup Build Environment
        run: |
          echo "Setting up build environment..."
          python --version
          node --version
          npm --version
          yarn --version
          
          # macOS 特定设置
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Setting up macOS build environment..."
            # 确保有 Xcode 命令行工具
            xcode-select --print-path
            # 设置 CC 和 CXX 环境变量
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Setup Build Tools
        run: |
          echo "Setting up build tools for ${{ matrix.os }}..."
          
          # 检查 Python 安装
          echo "Python version:"
          python --version
          
          # 全局安装必要的工具
          npm install -g @mapbox/node-pre-gyp node-gyp@latest
          
          echo "Build tools setup complete"
        shell: bash

      - name: Clean Build Cache
        run: |
          echo "Cleaning build cache..."
          # 清理 node-gyp 缓存
          node-gyp clean || true
          # 清理 npm 缓存
          npm cache clean --force
        shell: bash

      - name: Handle extract-file-icon Dependency (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Handling extract-file-icon dependency for Windows..."
          
          # 备份原始 package.json
          cp package.json package.json.backup
          
          # 临时移除 extract-file-icon 依赖以避免构建问题
          node -e "
            const pkg = require('./package.json');
            const originalDeps = { ...pkg.dependencies };
            delete pkg.dependencies['extract-file-icon'];
            
            // 保存修改后的 package.json
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            
            // 保存原始依赖信息供后续使用
            require('fs').writeFileSync('original-deps.json', JSON.stringify(originalDeps, null, 2));
          "
          
          echo "extract-file-icon dependency temporarily removed for Windows build"
        shell: bash

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          yarn install --network-timeout 300000
        shell: bash
        env:
          PYTHON: python
          npm_config_python: python
          npm_config_msvs_version: ${{ matrix.os == 'windows-latest' && '2022' || '' }}
          npm_config_target_arch: x64

      - name: Create Mock extract-file-icon (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Creating mock extract-file-icon module for Windows..."
          
          # 创建 mock extract-file-icon 模块
          mkdir -p node_modules/extract-file-icon
          
          # package.json
          cat > node_modules/extract-file-icon/package.json << 'MOCK_EOF'
          {
            "name": "extract-file-icon",
            "version": "0.3.2",
            "main": "index.js"
          }
          MOCK_EOF
          
          # JavaScript 实现
          cat > node_modules/extract-file-icon/index.js << 'MOCK_EOF'
// Mock extract-file-icon for Windows CI build
function extractFileIcon(path, size) {
  console.warn('extract-file-icon: Windows CI build - returning null');
  return null;
}

module.exports = extractFileIcon;
module.exports.default = extractFileIcon;
MOCK_EOF
          
          # TypeScript 声明文件
          cat > node_modules/extract-file-icon/index.d.ts << 'MOCK_EOF'
declare function extractFileIcon(path: string, size?: number): Buffer | null;
export default extractFileIcon;
MOCK_EOF
          
          echo "Mock extract-file-icon module created successfully"
        shell: bash

      - name: Build TypeScript
        run: |
          echo "Building TypeScript..."
          yarn build
        shell: bash

      - name: Build Native Module
        run: |
          echo "Building native module for ${{ matrix.os }}..."
          
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Building on macOS..."
            yarn rebuild
            
            # 创建预编译二进制文件夹结构
            echo "Creating prebuilt binary structure..."
            mkdir -p prebuilds/darwin-x64
            
            if [ -f "build/Release/addon.node" ]; then
              cp "build/Release/addon.node" "prebuilds/darwin-x64/"
              echo "[SUCCESS] Copied macOS binary to prebuilds"
            else
              echo "[ERROR] macOS binary not found"
              exit 1
            fi
            
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Building on Windows..."
            
            # 显示构建环境信息
            echo "Build environment:"
            echo "MSVS Version: $npm_config_msvs_version"
            echo "Python: $npm_config_python"
            echo "Target arch: $npm_config_target_arch"
            
            # 构建原生模块
            yarn rebuild
            
            # 创建预编译二进制文件夹结构
            echo "Creating prebuilt binary structure..."
            mkdir -p prebuilds/win32-x64
            
            if [ -f "build/Release/addon.node" ]; then
              cp "build/Release/addon.node" "prebuilds/win32-x64/"
              echo "[SUCCESS] Copied Windows binary to prebuilds"
            else
              echo "[ERROR] Windows binary not found"
              ls -la build/Release/ || echo "No build/Release directory"
              exit 1
            fi
          fi
          
          echo "Build output:"
          ls -la build/Release/ || echo "No build output found"
        shell: bash
        env:
          PYTHON: python
          npm_config_python: python
          npm_config_msvs_version: ${{ matrix.os == 'windows-latest' && '2022' || '' }}
          npm_config_target_arch: x64

      - name: Verify Build Output
        run: |
          echo "Checking build output for ${{ matrix.os }}..."
          ls -la dist/ || echo "No dist directory"
          ls -la build/ || echo "No build directory"
          ls -la prebuilds/ || echo "No prebuilds directory"
          
          # 显示预编译二进制文件
          if [ -d "prebuilds" ]; then
            echo "Prebuilt binaries:"
            find prebuilds -type f -exec ls -la {} \;
          fi
          
          echo "=== Build Summary for ${{ matrix.os }} ==="
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            if [ -f "prebuilds/darwin-x64/addon.node" ]; then
              echo "[SUCCESS] macOS: TypeScript compiled + Native module built successfully"
            else
              echo "[ERROR] macOS: Build failed"
              exit 1
            fi
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            if [ -f "prebuilds/win32-x64/addon.node" ]; then
              echo "[SUCCESS] Windows: TypeScript compiled + Native module built successfully"
            else
              echo "[ERROR] Windows: Build failed"
              exit 1
            fi
          fi
        shell: bash

      - name: Restore Original Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Restoring original dependencies for packaging..."
          if [ -f "package.json.backup" ]; then
            cp package.json.backup package.json
            echo "Original package.json restored"
          fi
        shell: bash

      - name: Archive Artifacts
        run: |
          echo "Creating release package..."
          mkdir -p release-package
          
          # 复制必要文件
          if [ -d "dist" ]; then
            cp -r dist release-package/
            echo "Copied dist directory"
          fi
          
          if [ -d "build" ]; then
            cp -r build release-package/
            echo "Copied build directory"
          fi
          
          if [ -d "prebuilds" ]; then
            cp -r prebuilds release-package/
            echo "Copied prebuilds directory"
          fi
          
          # 复制其他必要文件
          cp package.json release-package/
          cp README.md release-package/
          cp LICENSE release-package/
          cp binding.gyp release-package/
          
          # 创建压缩包
          cd release-package
          tar -czf ../${{ matrix.platform }}-x64.tar.gz .
          cd ..
          
          echo "Archive created: ${{ matrix.platform }}-x64.tar.gz"
          ls -la ${{ matrix.platform }}-x64.tar.gz
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-x64
          path: ${{ matrix.platform }}-x64.tar.gz

  release:
    needs: build  # 依赖 build 任务
    runs-on: ubuntu-latest
    timeout-minutes: 10  # 设置超时时间
    if: ${{ !cancelled() && (needs.build.result == 'success' || needs.build.result == 'failure') }}  # 即使部分构建失败也继续
    permissions:
      contents: write  # 允许创建 Release

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
        continue-on-error: true

      - name: List Available Artifacts
        run: |
          echo "Available artifacts:"
          find ./artifacts -type f -name "*.tar.gz" || echo "No artifacts found"
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name || github.ref_name }}  # 手动触发时使用输入的标签，自动触发时使用推送的标签
          name: Release ${{ inputs.tag_name || github.ref_name }}
          files: |
            artifacts/**/*
          draft: false
          fail_on_unmatched_files: false  # 不要因为找不到文件而失败
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动使用内置 Token