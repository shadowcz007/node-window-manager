name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 仅当推送以 v 开头的标签时触发（例如 v1.0.0）
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag_name:
        description: '发布版本标签（例如：v1.0.0）'
        required: true
        default: 'v1.0.0'
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # 设置较短的超时时间
    strategy:
      fail-fast: false  # 不要因为一个平台失败就停止其他平台
      matrix:
        os: [macos-latest, windows-latest]  # 并行构建 macOS 和 Windows
        include:
          - os: macos-latest
            artifact_name: macos-binary
          - os: windows-latest
            artifact_name: windows-binary
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，避免浅克隆问题

      - name: Configure Git (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # 使用 Python 3.10，兼容 node-gyp

      - name: Setup Visual Studio (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # 降级到 Node 18，更稳定
          cache: 'yarn'
          architecture: 'x64'  # 明确指定 x64 架构

      - name: Setup Build Environment
        run: |
          echo "Setting up build environment..."
          python --version
          node --version
          npm --version
          yarn --version
          
          # 配置 node-gyp 使用正确的 Python 版本
          npm config set python python3
          
          # macOS 特定设置
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Setting up macOS build environment..."
            # 确保有 Xcode 命令行工具
            xcode-select --print-path
            # 设置 CC 和 CXX 环境变量
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
          
          # Windows 特定设置
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Setting up Windows build environment..."
            # 配置 Visual Studio 版本
            npm config set msvs_version 2022
            # 设置架构
            npm config set target_arch x64
            npm config set target_platform win32
            npm config set cache C:\npm-cache
            npm config set node_gyp "C:\npm\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"
          fi
        shell: bash

      - name: Setup Windows Build Tools
        if: matrix.os == 'windows-latest'
        run: |
          echo "Setting up Windows build tools..."
          
          # 检查现有 Visual Studio 安装
          echo "Checking Visual Studio installations..."
          dir "C:\Program Files\Microsoft Visual Studio\" || echo "No VS in Program Files"
          dir "C:\Program Files (x86)\Microsoft Visual Studio\" || echo "No VS in Program Files (x86)"
          
          # 安装必要的工具
          npm install -g @mapbox/node-pre-gyp
          
          # 设置 Visual Studio 路径
          echo 'VCINSTALLDIR=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\' >> $GITHUB_ENV
          echo 'WindowsSDKDir=C:\Program Files (x86)\Windows Kits\10\' >> $GITHUB_ENV
        shell: bash

      - name: Update node-gyp
        run: |
          echo "Updating node-gyp to latest version..."
          npm install -g node-gyp@latest
          node-gyp --version
        shell: bash

      - name: Clean Build Cache
        run: |
          echo "Cleaning build cache..."
          # 清理 node-gyp 缓存
          node-gyp clean || true
          # 清理 npm 缓存
          npm cache clean --force
        shell: bash

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          yarn install --network-timeout 300000
        shell: bash
        env:
          PYTHON: python3
          npm_config_msvs_version: 2022
          npm_config_target_arch: x64

      - name: Build TypeScript
        run: |
          echo "Building TypeScript..."
          yarn build
        shell: bash

      - name: Build Native Module
        run: |
          echo "Building native module..."
          yarn rebuild
        shell: bash
        env:
          PYTHON: python3
          npm_config_python: python3
          npm_config_msvs_version: 2022
          npm_config_target_arch: x64
          npm_config_target_platform: win32
          npm_config_disturl: https://nodejs.org/download/release/
          npm_config_cache: C:\npm-cache
        continue-on-error: false

      - name: Verify Build Output
        run: |
          echo "Checking build output..."
          ls -la dist/ || echo "No dist directory"
          ls -la build/ || echo "No build directory"
        shell: bash

      - name: Archive Artifacts
        run: |
          echo "Creating release package..."
          mkdir -p release-package
          
          # 复制必要文件
          if [ -d "dist" ]; then
            cp -r dist release-package/
            echo "Copied dist directory"
          fi
          
          if [ -d "build" ]; then
            cp -r build release-package/
            echo "Copied build directory"
          fi
          
          cp package.json release-package/
          cp README.md release-package/
          cp LICENSE release-package/
          
          # 创建压缩包
          cd release-package
          tar -czf ../${{ matrix.artifact_name }}.tar.gz .
          cd ..
          
          echo "Archive created: ${{ matrix.artifact_name }}.tar.gz"
          ls -la ${{ matrix.artifact_name }}.tar.gz
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.tar.gz

  release:
    needs: build  # 依赖 build 任务
    runs-on: ubuntu-latest
    timeout-minutes: 10  # 设置超时时间
    if: ${{ !cancelled() && (needs.build.result == 'success' || needs.build.result == 'failure') }}  # 即使部分构建失败也继续
    permissions:
      contents: write  # 允许创建 Release

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
        continue-on-error: true

      - name: List Available Artifacts
        run: |
          echo "Available artifacts:"
          find ./artifacts -type f -name "*.tar.gz" || echo "No artifacts found"
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name || github.ref_name }}  # 手动触发时使用输入的标签，自动触发时使用推送的标签
          name: Release ${{ inputs.tag_name || github.ref_name }}
          files: |
            artifacts/*/*.tar.gz
          draft: false
          fail_on_unmatched_files: false  # 不要因为找不到文件而失败
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动使用内置 Token